// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: service/reddit/comment/comment.proto

package comment

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Author        string `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Body          string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	BodyHtml      string `protobuf:"bytes,4,opt,name=body_html,json=bodyHtml,proto3" json:"body_html,omitempty"`
	CreatedUtc    int64  `protobuf:"varint,5,opt,name=created_utc,json=createdUtc,proto3" json:"created_utc,omitempty"`
	Distinguished string `protobuf:"bytes,6,opt,name=distinguished,proto3" json:"distinguished,omitempty"`
	Edited        bool   `protobuf:"varint,7,opt,name=edited,proto3" json:"edited,omitempty"`
	IsSubmitter   bool   `protobuf:"varint,8,opt,name=is_submitter,json=isSubmitter,proto3" json:"is_submitter,omitempty"`
	LinkId        string `protobuf:"bytes,9,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	ParentId      string `protobuf:"bytes,10,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Permalink     string `protobuf:"bytes,11,opt,name=permalink,proto3" json:"permalink,omitempty"`
	Stickied      bool   `protobuf:"varint,12,opt,name=stickied,proto3" json:"stickied,omitempty"`
	Submission    string `protobuf:"bytes,13,opt,name=submission,proto3" json:"submission,omitempty"`
	Subreddit     string `protobuf:"bytes,14,opt,name=subreddit,proto3" json:"subreddit,omitempty"`
	SubredditId   string `protobuf:"bytes,15,opt,name=subreddit_id,json=subredditId,proto3" json:"subreddit_id,omitempty"`
}

func (x *NewCommentRequest) Reset() {
	*x = NewCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reddit_comment_comment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCommentRequest) ProtoMessage() {}

func (x *NewCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_reddit_comment_comment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCommentRequest.ProtoReflect.Descriptor instead.
func (*NewCommentRequest) Descriptor() ([]byte, []int) {
	return file_service_reddit_comment_comment_proto_rawDescGZIP(), []int{0}
}

func (x *NewCommentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewCommentRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *NewCommentRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *NewCommentRequest) GetBodyHtml() string {
	if x != nil {
		return x.BodyHtml
	}
	return ""
}

func (x *NewCommentRequest) GetCreatedUtc() int64 {
	if x != nil {
		return x.CreatedUtc
	}
	return 0
}

func (x *NewCommentRequest) GetDistinguished() string {
	if x != nil {
		return x.Distinguished
	}
	return ""
}

func (x *NewCommentRequest) GetEdited() bool {
	if x != nil {
		return x.Edited
	}
	return false
}

func (x *NewCommentRequest) GetIsSubmitter() bool {
	if x != nil {
		return x.IsSubmitter
	}
	return false
}

func (x *NewCommentRequest) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *NewCommentRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *NewCommentRequest) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *NewCommentRequest) GetStickied() bool {
	if x != nil {
		return x.Stickied
	}
	return false
}

func (x *NewCommentRequest) GetSubmission() string {
	if x != nil {
		return x.Submission
	}
	return ""
}

func (x *NewCommentRequest) GetSubreddit() string {
	if x != nil {
		return x.Subreddit
	}
	return ""
}

func (x *NewCommentRequest) GetSubredditId() string {
	if x != nil {
		return x.SubredditId
	}
	return ""
}

type NewCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NewCommentResponse) Reset() {
	*x = NewCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reddit_comment_comment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCommentResponse) ProtoMessage() {}

func (x *NewCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_reddit_comment_comment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCommentResponse.ProtoReflect.Descriptor instead.
func (*NewCommentResponse) Descriptor() ([]byte, []int) {
	return file_service_reddit_comment_comment_proto_rawDescGZIP(), []int{1}
}

func (x *NewCommentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_service_reddit_comment_comment_proto protoreflect.FileDescriptor

var file_service_reddit_comment_comment_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbf, 0x03, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x64,
	0x79, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x74, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x55, 0x74, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x69, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x72, 0x65,
	0x64, 0x64, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0x5e,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x4e, 0x65, 0x77,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2e,
	0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x77, 0x61,
	0x6e, 0x6f, 0x6b, 0x2f, 0x6d, 0x69, 0x6e, 0x73, 0x69, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_reddit_comment_comment_proto_rawDescOnce sync.Once
	file_service_reddit_comment_comment_proto_rawDescData = file_service_reddit_comment_comment_proto_rawDesc
)

func file_service_reddit_comment_comment_proto_rawDescGZIP() []byte {
	file_service_reddit_comment_comment_proto_rawDescOnce.Do(func() {
		file_service_reddit_comment_comment_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_reddit_comment_comment_proto_rawDescData)
	})
	return file_service_reddit_comment_comment_proto_rawDescData
}

var file_service_reddit_comment_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_service_reddit_comment_comment_proto_goTypes = []interface{}{
	(*NewCommentRequest)(nil),  // 0: server.comment.NewCommentRequest
	(*NewCommentResponse)(nil), // 1: server.comment.NewCommentResponse
}
var file_service_reddit_comment_comment_proto_depIdxs = []int32{
	0, // 0: server.comment.Comment.NewComment:input_type -> server.comment.NewCommentRequest
	1, // 1: server.comment.Comment.NewComment:output_type -> server.comment.NewCommentResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_service_reddit_comment_comment_proto_init() }
func file_service_reddit_comment_comment_proto_init() {
	if File_service_reddit_comment_comment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_reddit_comment_comment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_reddit_comment_comment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_reddit_comment_comment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_reddit_comment_comment_proto_goTypes,
		DependencyIndexes: file_service_reddit_comment_comment_proto_depIdxs,
		MessageInfos:      file_service_reddit_comment_comment_proto_msgTypes,
	}.Build()
	File_service_reddit_comment_comment_proto = out.File
	file_service_reddit_comment_comment_proto_rawDesc = nil
	file_service_reddit_comment_comment_proto_goTypes = nil
	file_service_reddit_comment_comment_proto_depIdxs = nil
}
