// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: service/reddit/submission/submission.proto

package submission

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Author            string  `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	AuthorFlairText   string  `protobuf:"bytes,3,opt,name=author_flair_text,json=authorFlairText,proto3" json:"author_flair_text,omitempty"`
	Clicked           bool    `protobuf:"varint,4,opt,name=clicked,proto3" json:"clicked,omitempty"`
	CreatedUtc        int64   `protobuf:"varint,5,opt,name=created_utc,json=createdUtc,proto3" json:"created_utc,omitempty"`
	IsOriginalContent bool    `protobuf:"varint,6,opt,name=is_original_content,json=isOriginalContent,proto3" json:"is_original_content,omitempty"`
	IsSelf            bool    `protobuf:"varint,7,opt,name=is_self,json=isSelf,proto3" json:"is_self,omitempty"`
	LinkFlairText     string  `protobuf:"bytes,8,opt,name=link_flair_text,json=linkFlairText,proto3" json:"link_flair_text,omitempty"`
	Locked            bool    `protobuf:"varint,9,opt,name=locked,proto3" json:"locked,omitempty"`
	Name              string  `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	NumComments       int64   `protobuf:"varint,11,opt,name=num_comments,json=numComments,proto3" json:"num_comments,omitempty"`
	Over_18           bool    `protobuf:"varint,12,opt,name=over_18,json=over18,proto3" json:"over_18,omitempty"`
	Permalink         string  `protobuf:"bytes,13,opt,name=permalink,proto3" json:"permalink,omitempty"`
	Score             int64   `protobuf:"varint,14,opt,name=score,proto3" json:"score,omitempty"`
	Selftext          string  `protobuf:"bytes,15,opt,name=selftext,proto3" json:"selftext,omitempty"`
	Subreddit         string  `protobuf:"bytes,16,opt,name=subreddit,proto3" json:"subreddit,omitempty"`
	SubredditId       string  `protobuf:"bytes,17,opt,name=subreddit_id,json=subredditId,proto3" json:"subreddit_id,omitempty"`
	Title             string  `protobuf:"bytes,18,opt,name=title,proto3" json:"title,omitempty"`
	UpvoteRatio       float32 `protobuf:"fixed32,19,opt,name=upvote_ratio,json=upvoteRatio,proto3" json:"upvote_ratio,omitempty"`
	Url               string  `protobuf:"bytes,20,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *NewSubmissionRequest) Reset() {
	*x = NewSubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reddit_submission_submission_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSubmissionRequest) ProtoMessage() {}

func (x *NewSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_reddit_submission_submission_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSubmissionRequest.ProtoReflect.Descriptor instead.
func (*NewSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_service_reddit_submission_submission_proto_rawDescGZIP(), []int{0}
}

func (x *NewSubmissionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewSubmissionRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *NewSubmissionRequest) GetAuthorFlairText() string {
	if x != nil {
		return x.AuthorFlairText
	}
	return ""
}

func (x *NewSubmissionRequest) GetClicked() bool {
	if x != nil {
		return x.Clicked
	}
	return false
}

func (x *NewSubmissionRequest) GetCreatedUtc() int64 {
	if x != nil {
		return x.CreatedUtc
	}
	return 0
}

func (x *NewSubmissionRequest) GetIsOriginalContent() bool {
	if x != nil {
		return x.IsOriginalContent
	}
	return false
}

func (x *NewSubmissionRequest) GetIsSelf() bool {
	if x != nil {
		return x.IsSelf
	}
	return false
}

func (x *NewSubmissionRequest) GetLinkFlairText() string {
	if x != nil {
		return x.LinkFlairText
	}
	return ""
}

func (x *NewSubmissionRequest) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *NewSubmissionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewSubmissionRequest) GetNumComments() int64 {
	if x != nil {
		return x.NumComments
	}
	return 0
}

func (x *NewSubmissionRequest) GetOver_18() bool {
	if x != nil {
		return x.Over_18
	}
	return false
}

func (x *NewSubmissionRequest) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *NewSubmissionRequest) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *NewSubmissionRequest) GetSelftext() string {
	if x != nil {
		return x.Selftext
	}
	return ""
}

func (x *NewSubmissionRequest) GetSubreddit() string {
	if x != nil {
		return x.Subreddit
	}
	return ""
}

func (x *NewSubmissionRequest) GetSubredditId() string {
	if x != nil {
		return x.SubredditId
	}
	return ""
}

func (x *NewSubmissionRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewSubmissionRequest) GetUpvoteRatio() float32 {
	if x != nil {
		return x.UpvoteRatio
	}
	return 0
}

func (x *NewSubmissionRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type NewSubmissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NewSubmissionResponse) Reset() {
	*x = NewSubmissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reddit_submission_submission_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSubmissionResponse) ProtoMessage() {}

func (x *NewSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_reddit_submission_submission_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSubmissionResponse.ProtoReflect.Descriptor instead.
func (*NewSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_service_reddit_submission_submission_proto_rawDescGZIP(), []int{1}
}

func (x *NewSubmissionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_service_reddit_submission_submission_proto protoreflect.FileDescriptor

var file_service_reddit_submission_submission_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74,
	0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x22, 0xda, 0x04, 0x0a, 0x14, 0x4e, 0x65,
	0x77, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x46, 0x6c, 0x61,
	0x69, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x74, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x74,
	0x63, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x6c, 0x61, 0x69, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x31, 0x38, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6f, 0x76, 0x65, 0x72, 0x31, 0x38, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x27, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32,
	0x64, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a,
	0x0d, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e,
	0x4e, 0x65, 0x77, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x77, 0x61, 0x6e, 0x6f, 0x6b, 0x2f, 0x6d, 0x69, 0x6e, 0x73, 0x69,
	0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65,
	0x64, 0x64, 0x69, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_reddit_submission_submission_proto_rawDescOnce sync.Once
	file_service_reddit_submission_submission_proto_rawDescData = file_service_reddit_submission_submission_proto_rawDesc
)

func file_service_reddit_submission_submission_proto_rawDescGZIP() []byte {
	file_service_reddit_submission_submission_proto_rawDescOnce.Do(func() {
		file_service_reddit_submission_submission_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_reddit_submission_submission_proto_rawDescData)
	})
	return file_service_reddit_submission_submission_proto_rawDescData
}

var file_service_reddit_submission_submission_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_service_reddit_submission_submission_proto_goTypes = []interface{}{
	(*NewSubmissionRequest)(nil),  // 0: server.post.NewSubmissionRequest
	(*NewSubmissionResponse)(nil), // 1: server.post.NewSubmissionResponse
}
var file_service_reddit_submission_submission_proto_depIdxs = []int32{
	0, // 0: server.post.Submission.NewSubmission:input_type -> server.post.NewSubmissionRequest
	1, // 1: server.post.Submission.NewSubmission:output_type -> server.post.NewSubmissionResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_service_reddit_submission_submission_proto_init() }
func file_service_reddit_submission_submission_proto_init() {
	if File_service_reddit_submission_submission_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_reddit_submission_submission_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_reddit_submission_submission_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSubmissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_reddit_submission_submission_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_reddit_submission_submission_proto_goTypes,
		DependencyIndexes: file_service_reddit_submission_submission_proto_depIdxs,
		MessageInfos:      file_service_reddit_submission_submission_proto_msgTypes,
	}.Build()
	File_service_reddit_submission_submission_proto = out.File
	file_service_reddit_submission_submission_proto_rawDesc = nil
	file_service_reddit_submission_submission_proto_goTypes = nil
	file_service_reddit_submission_submission_proto_depIdxs = nil
}
